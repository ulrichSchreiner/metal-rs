/*
 * metal-api
 *
 * API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ulrich.schreiner@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1MachineRegisterRequest {
    #[serde(rename = "bios")]
    pub bios: crate::models::V1MachineBios,
    #[serde(rename = "hardware")]
    pub hardware: crate::models::V1MachineHardwareExtended,
    #[serde(rename = "ipmi")]
    pub ipmi: crate::models::V1MachineIpmi,
    /// the partition id to register this machine with
    #[serde(rename = "partitionid")]
    pub partitionid: String,
    /// the rack id where this machine is connected to
    #[serde(rename = "rackid")]
    pub rackid: String,
    /// tags for this machine
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
    /// the product uuid of the machine to register
    #[serde(rename = "uuid")]
    pub uuid: String,
}

impl V1MachineRegisterRequest {
    pub fn new(bios: crate::models::V1MachineBios, hardware: crate::models::V1MachineHardwareExtended, ipmi: crate::models::V1MachineIpmi, partitionid: String, rackid: String, tags: Vec<String>, uuid: String) -> V1MachineRegisterRequest {
        V1MachineRegisterRequest {
            bios,
            hardware,
            ipmi,
            partitionid,
            rackid,
            tags,
            uuid,
        }
    }
}


