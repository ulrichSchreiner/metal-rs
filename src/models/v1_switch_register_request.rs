/*
 * metal-api
 *
 * API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ulrich.schreiner@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1SwitchRegisterRequest {
    /// a description for this entity
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// the unique ID of this entity
    #[serde(rename = "id")]
    pub id: String,
    /// the mode the switch currently has
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// a readable name for this entity
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the list of network interfaces on the switch
    #[serde(rename = "nics")]
    pub nics: Vec<crate::models::V1SwitchNic>,
    /// the partition in which this switch is located
    #[serde(rename = "partition_id")]
    pub partition_id: String,
    /// the id of the rack in which this switch is located
    #[serde(rename = "rack_id")]
    pub rack_id: String,
}

impl V1SwitchRegisterRequest {
    pub fn new(id: String, nics: Vec<crate::models::V1SwitchNic>, partition_id: String, rack_id: String) -> V1SwitchRegisterRequest {
        V1SwitchRegisterRequest {
            description: None,
            id,
            mode: None,
            name: None,
            nics,
            partition_id,
            rack_id,
        }
    }
}


