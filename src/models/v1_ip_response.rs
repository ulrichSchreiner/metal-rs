/*
 * metal-api
 *
 * API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ulrich.schreiner@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1IpResponse {
    /// a unique identifier for this ip address allocation, can be used to distinguish between ip address allocation over time.
    #[serde(rename = "allocationuuid")]
    pub allocationuuid: String,
    /// the last changed timestamp of this entity
    #[serde(rename = "changed", skip_serializing_if = "Option::is_none")]
    pub changed: Option<String>,
    /// the creation time of this entity
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// a description for this entity
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// the address (ipv4 or ipv6) of this ip
    #[serde(rename = "ipaddress")]
    pub ipaddress: String,
    /// a readable name for this entity
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the network this ip allocate request address belongs to
    #[serde(rename = "networkid")]
    pub networkid: String,
    /// the project this ip address belongs to
    #[serde(rename = "projectid")]
    pub projectid: String,
    /// free tags that you associate with this ip.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// the ip type, ephemeral leads to automatic cleanup of the ip address, static will enable re-use of the ip at a later point in time
    #[serde(rename = "type")]
    pub _type: Type,
}

impl V1IpResponse {
    pub fn new(allocationuuid: String, ipaddress: String, networkid: String, projectid: String, _type: Type) -> V1IpResponse {
        V1IpResponse {
            allocationuuid,
            changed: None,
            created: None,
            description: None,
            ipaddress,
            name: None,
            networkid,
            projectid,
            tags: None,
            _type,
        }
    }
}

/// the ip type, ephemeral leads to automatic cleanup of the ip address, static will enable re-use of the ip at a later point in time
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ephemeral")]
    Ephemeral,
    #[serde(rename = "static")]
    _Static,
}

