/*
 * metal-api
 *
 * API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ulrich.schreiner@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1MachineFindRequest {
    #[serde(rename = "allocation_hostname", skip_serializing_if = "Option::is_none")]
    pub allocation_hostname: Option<String>,
    #[serde(rename = "allocation_image_id", skip_serializing_if = "Option::is_none")]
    pub allocation_image_id: Option<String>,
    #[serde(rename = "allocation_name", skip_serializing_if = "Option::is_none")]
    pub allocation_name: Option<String>,
    #[serde(rename = "allocation_project", skip_serializing_if = "Option::is_none")]
    pub allocation_project: Option<String>,
    #[serde(rename = "allocation_succeeded", skip_serializing_if = "Option::is_none")]
    pub allocation_succeeded: Option<bool>,
    #[serde(rename = "disk_names", skip_serializing_if = "Option::is_none")]
    pub disk_names: Option<Vec<String>>,
    #[serde(rename = "disk_sizes", skip_serializing_if = "Option::is_none")]
    pub disk_sizes: Option<Vec<i64>>,
    #[serde(rename = "fru_board_mfg", skip_serializing_if = "Option::is_none")]
    pub fru_board_mfg: Option<String>,
    #[serde(rename = "fru_board_mfg_serial", skip_serializing_if = "Option::is_none")]
    pub fru_board_mfg_serial: Option<String>,
    #[serde(rename = "fru_board_part_number", skip_serializing_if = "Option::is_none")]
    pub fru_board_part_number: Option<String>,
    #[serde(rename = "fru_chassis_part_number", skip_serializing_if = "Option::is_none")]
    pub fru_chassis_part_number: Option<String>,
    #[serde(rename = "fru_chassis_part_serial", skip_serializing_if = "Option::is_none")]
    pub fru_chassis_part_serial: Option<String>,
    #[serde(rename = "fru_product_manufacturer", skip_serializing_if = "Option::is_none")]
    pub fru_product_manufacturer: Option<String>,
    #[serde(rename = "fru_product_part_number", skip_serializing_if = "Option::is_none")]
    pub fru_product_part_number: Option<String>,
    #[serde(rename = "fru_product_serial", skip_serializing_if = "Option::is_none")]
    pub fru_product_serial: Option<String>,
    #[serde(rename = "hardware_cpu_cores", skip_serializing_if = "Option::is_none")]
    pub hardware_cpu_cores: Option<i64>,
    #[serde(rename = "hardware_memory", skip_serializing_if = "Option::is_none")]
    pub hardware_memory: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "ipmi_address", skip_serializing_if = "Option::is_none")]
    pub ipmi_address: Option<String>,
    #[serde(rename = "ipmi_interface", skip_serializing_if = "Option::is_none")]
    pub ipmi_interface: Option<String>,
    #[serde(rename = "ipmi_mac_address", skip_serializing_if = "Option::is_none")]
    pub ipmi_mac_address: Option<String>,
    #[serde(rename = "ipmi_user", skip_serializing_if = "Option::is_none")]
    pub ipmi_user: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "network_asns", skip_serializing_if = "Option::is_none")]
    pub network_asns: Option<Vec<i64>>,
    #[serde(rename = "network_destination_prefixes", skip_serializing_if = "Option::is_none")]
    pub network_destination_prefixes: Option<Vec<String>>,
    #[serde(rename = "network_ids", skip_serializing_if = "Option::is_none")]
    pub network_ids: Option<Vec<String>>,
    #[serde(rename = "network_ips", skip_serializing_if = "Option::is_none")]
    pub network_ips: Option<Vec<String>>,
    #[serde(rename = "network_nat", skip_serializing_if = "Option::is_none")]
    pub network_nat: Option<bool>,
    #[serde(rename = "network_prefixes", skip_serializing_if = "Option::is_none")]
    pub network_prefixes: Option<Vec<String>>,
    #[serde(rename = "network_private", skip_serializing_if = "Option::is_none")]
    pub network_private: Option<bool>,
    #[serde(rename = "network_underlay", skip_serializing_if = "Option::is_none")]
    pub network_underlay: Option<bool>,
    #[serde(rename = "network_vrfs", skip_serializing_if = "Option::is_none")]
    pub network_vrfs: Option<Vec<i64>>,
    #[serde(rename = "nics_mac_addresses", skip_serializing_if = "Option::is_none")]
    pub nics_mac_addresses: Option<Vec<String>>,
    #[serde(rename = "nics_names", skip_serializing_if = "Option::is_none")]
    pub nics_names: Option<Vec<String>>,
    #[serde(rename = "nics_neighbor_mac_addresses", skip_serializing_if = "Option::is_none")]
    pub nics_neighbor_mac_addresses: Option<Vec<String>>,
    #[serde(rename = "nics_neighbor_names", skip_serializing_if = "Option::is_none")]
    pub nics_neighbor_names: Option<Vec<String>>,
    #[serde(rename = "nics_neighbor_vrfs", skip_serializing_if = "Option::is_none")]
    pub nics_neighbor_vrfs: Option<Vec<String>>,
    #[serde(rename = "nics_vrfs", skip_serializing_if = "Option::is_none")]
    pub nics_vrfs: Option<Vec<String>>,
    #[serde(rename = "partition_id", skip_serializing_if = "Option::is_none")]
    pub partition_id: Option<String>,
    #[serde(rename = "rackid", skip_serializing_if = "Option::is_none")]
    pub rackid: Option<String>,
    #[serde(rename = "sizeid", skip_serializing_if = "Option::is_none")]
    pub sizeid: Option<String>,
    #[serde(rename = "state_value", skip_serializing_if = "Option::is_none")]
    pub state_value: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

impl V1MachineFindRequest {
    pub fn new() -> V1MachineFindRequest {
        V1MachineFindRequest {
            allocation_hostname: None,
            allocation_image_id: None,
            allocation_name: None,
            allocation_project: None,
            allocation_succeeded: None,
            disk_names: None,
            disk_sizes: None,
            fru_board_mfg: None,
            fru_board_mfg_serial: None,
            fru_board_part_number: None,
            fru_chassis_part_number: None,
            fru_chassis_part_serial: None,
            fru_product_manufacturer: None,
            fru_product_part_number: None,
            fru_product_serial: None,
            hardware_cpu_cores: None,
            hardware_memory: None,
            id: None,
            ipmi_address: None,
            ipmi_interface: None,
            ipmi_mac_address: None,
            ipmi_user: None,
            name: None,
            network_asns: None,
            network_destination_prefixes: None,
            network_ids: None,
            network_ips: None,
            network_nat: None,
            network_prefixes: None,
            network_private: None,
            network_underlay: None,
            network_vrfs: None,
            nics_mac_addresses: None,
            nics_names: None,
            nics_neighbor_mac_addresses: None,
            nics_neighbor_names: None,
            nics_neighbor_vrfs: None,
            nics_vrfs: None,
            partition_id: None,
            rackid: None,
            sizeid: None,
            state_value: None,
            tags: None,
        }
    }
}


