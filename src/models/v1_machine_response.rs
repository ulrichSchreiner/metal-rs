/*
 * metal-api
 *
 * API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ulrich.schreiner@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1MachineResponse {
    #[serde(rename = "allocation", skip_serializing_if = "Option::is_none")]
    pub allocation: Option<crate::models::V1MachineAllocation>,
    #[serde(rename = "bios")]
    pub bios: crate::models::V1MachineBios,
    /// the last changed timestamp of this entity
    #[serde(rename = "changed", skip_serializing_if = "Option::is_none")]
    pub changed: Option<String>,
    /// the creation time of this entity
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// a description for this entity
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "events")]
    pub events: crate::models::V1MachineRecentProvisioningEvents,
    #[serde(rename = "hardware")]
    pub hardware: crate::models::V1MachineHardware,
    /// the unique ID of this entity
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "ledstate")]
    pub ledstate: crate::models::V1ChassisIdentifyLedState,
    /// the liveliness of this machine
    #[serde(rename = "liveliness")]
    pub liveliness: String,
    /// a readable name for this entity
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<crate::models::V1PartitionResponse>,
    /// the rack assigned to this machine
    #[serde(rename = "rackid", skip_serializing_if = "Option::is_none")]
    pub rackid: Option<String>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<crate::models::V1SizeResponse>,
    #[serde(rename = "state")]
    pub state: crate::models::V1MachineState,
    /// tags for this machine
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
}

impl V1MachineResponse {
    pub fn new(bios: crate::models::V1MachineBios, events: crate::models::V1MachineRecentProvisioningEvents, hardware: crate::models::V1MachineHardware, id: String, ledstate: crate::models::V1ChassisIdentifyLedState, liveliness: String, state: crate::models::V1MachineState, tags: Vec<String>) -> V1MachineResponse {
        V1MachineResponse {
            allocation: None,
            bios,
            changed: None,
            created: None,
            description: None,
            events,
            hardware,
            id,
            ledstate,
            liveliness,
            name: None,
            partition: None,
            rackid: None,
            size: None,
            state,
            tags,
        }
    }
}


