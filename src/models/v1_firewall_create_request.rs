/*
 * metal-api
 *
 * API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ulrich.schreiner@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1FirewallCreateRequest {
    /// a description for this entity
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// if set to true, this firewall is set up in a High Available manner
    #[serde(rename = "ha", skip_serializing_if = "Option::is_none")]
    pub ha: Option<bool>,
    /// the hostname for the allocated machine (defaults to metal)
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// the image id to assign this machine to
    #[serde(rename = "imageid")]
    pub imageid: String,
    /// the ips to attach to this machine additionally
    #[serde(rename = "ips", skip_serializing_if = "Option::is_none")]
    pub ips: Option<Vec<String>>,
    /// a readable name for this entity
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the networks that this machine will be placed in.
    #[serde(rename = "networks", skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<crate::models::V1MachineAllocationNetwork>>,
    /// the partition id to assign this machine to
    #[serde(rename = "partitionid")]
    pub partitionid: String,
    /// the project id to assign this machine to
    #[serde(rename = "projectid")]
    pub projectid: String,
    /// the size id to assign this machine to
    #[serde(rename = "sizeid")]
    pub sizeid: String,
    /// the public ssh keys to access the machine with
    #[serde(rename = "ssh_pub_keys")]
    pub ssh_pub_keys: Vec<String>,
    /// tags for this machine
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// cloud-init.io compatible userdata must be base64 encoded
    #[serde(rename = "user_data", skip_serializing_if = "Option::is_none")]
    pub user_data: Option<String>,
    /// if this field is set, this specific machine will be allocated if it is not in available state and not currently allocated. this field overrules size and partition
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

impl V1FirewallCreateRequest {
    pub fn new(imageid: String, partitionid: String, projectid: String, sizeid: String, ssh_pub_keys: Vec<String>) -> V1FirewallCreateRequest {
        V1FirewallCreateRequest {
            description: None,
            ha: None,
            hostname: None,
            imageid,
            ips: None,
            name: None,
            networks: None,
            partitionid,
            projectid,
            sizeid,
            ssh_pub_keys,
            tags: None,
            user_data: None,
            uuid: None,
        }
    }
}


